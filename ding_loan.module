<?php

/**
 * @file
 * User loan listing and renewal functionallity.
 */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function ding_loan_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_loan_ding_provider_user() {
  return array(
    'loan' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 * Callback function for sorting loans.
 */
function ding_loan_sort_expiry($a, $b) {
  if ($a->expiry == $b->expiry) {
    return 0;
  }
  return ($a->expiry < $b->expiry) ? -1 : 1;
}

/**
 * Implements hook_ding_session_cache_defaults().
 *
 * Set default ding_session_cache settings and tell ding_session_cache that this
 * module supports it.
 */
function ding_loan_ding_session_cache_defaults() {
  return array(
    'titel' => 'Ding loans',
    'enabled' => TRUE,
    'expire' => 3600,
  );
}

/**
 * Implements a drupal form
 *   which show a list of reservations.
 */
function ding_loan_loans_form($form, &$form_state, $account, $loans = array()) {
  // Sort loans base on expire date.
  uasort($loans, 'ding_loan_sort_expiry');

  // Split the loans into groups based on the expiry date.
  $groups = _ding_loan_loans_group_loans_by_date($loans);

  // Store account information in the form (on server site).
  $form['account'] = array(
    '#type' => 'value',
    '#value' => $account,
  );

  // Store the loan list in the form (on server site).
  $form['items'] = array(
    '#type' => 'value',
    '#value' => $loans,
  );

  foreach ($groups as $gid => $group) {
    // Counter to ensure that the "select all" checkbox is disabled if all loans
    // in group are disabled.
    $disabled_count = 0;

    foreach ($group['loans'] as $loan) {

      // Add title item (grouping by due dates).
      $form['loans'][$gid]['title'] = array(
        '#type' => 'checkbox',
        '#title' => $group['title'],
        '#prefix' => '<div class="select-all ' . $gid . '">',
        '#suffix' => '</div>',
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'ding_loan') . '/js/ding_loan.js',
          ),
        ),
      );

      // Try to get entity for the loan.
      $entity = $loan->entity;
      if (!is_object($entity)) {
        $entity = ding_provider_get_pseudo_entity($loan->ding_entity_id);
      }

      // Create title that links to the object.
      $uri = entity_uri('ting_object', $entity);
      $title = l($entity->getTitle() ? $entity->getTitle() : $loan->display_name, $uri['path']);

      $item = array(
        '#type' => 'material_item',
        '#id' => $loan->id,
        '#title' => $title,
        '#cover' => field_view_field('ting_object', $entity, 'ting_cover', 'user_list'),
        '#information' => array(
          'loan_date' => array(
            'label' => t('Loan date'),
            'data' => format_date(strtotime(check_plain($loan->loan_date)), 'custom', 'd/m/Y'),
            'class' => 'loan-date',
            '#weight' => 0,
          ),
          'expiry' => array(
            'label' => t('Return date'),
            'data' => format_date(strtotime(check_plain($loan->expiry)), 'custom', 'd/m/Y'),
            'class' => 'expire-date',
            '#weight' => 4,
          ),
        ),
        '#disabled' => !$loan->renewable,
      );

      // Add material number.
      if (isset($loan->materials_number)) {
        $item['#information']['material_number'] = array(
          'label' => t('Material no.'),
          'data' => $loan->materials_number,
          'class' => 'material-number',
          '#weight' => 8,
        );
      }

      // If not renewable set message.
      if (empty($loan->renewable)) {
        $disabled_count++;
        $item['#material_message'] = array(
          'message' => t('This material can not be re-newed'),
          'class' => 'messages warning',
        );
      }

      // Add the reservation to the form.
      $form['loans'][$gid][$loan->id] = $item;
    }

    // Check if the "Select all" for this group should be disabled.
    if (count($group['loans']) == $disabled_count) {
      $form['loans'][$gid]['title']['#disabled'] = TRUE;
    }
  }

  // Add the renew buttons to top and bottom of the form.
  $form['actions_top'] = array(
    '#prefix' => '<div class="action-buttons">',
    '#suffix' => '</div>',
    '#weight' => 0,
  );

  $form['actions_top']['submit_first'] = array(
    '#type' => 'submit',
    '#prefix' => '<div class="renew-loan-button action-button">',
    '#value' => t('Renew selected (@count)', array('@count' => 0)),
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Submit handler for the form.
 */
function ding_loan_loans_form_submit($form, &$form_state) {
  global $user;
  $ids = array();
  $not_renewed = array();
  foreach ($form_state['values']['items'] as $item) {
    if($form_state['values'][$item->id]) {
      if ($item->renewable) {
        $ids[] = $item->id;
      } else {
        $not_renewed[] = $item->id;
      }
    }
  }
  ding_loan_handle_renew_loans($user, $ids, $not_renewed);
}

/**
 * Renew load submit handler.
 */
function ding_loan_loans_form_renew_submit($form, &$form_state) {
  form_set_value($form['loans'], array($form_state['triggering_element']['#loan_id']), $form_state);
  ding_loan_loans_form_submit($form, $form_state);
}

/**
 * Helper function to group loans by their due dates.
 */
function _ding_loan_loans_group_loans_by_date($loans) {
  $groups = array();
  $today = date('Y-m-d', REQUEST_TIME);

  foreach ($loans as $loan) {
    if ($loan->expiry < $today) {
      // Loans that are overdue.
      if (!isset($groups['overdue'])) {
        $groups['overdue'] = array(
          'title' => t('Loans overdue'),
          'loans' => array(),
        );
      }
      $groups['overdue']['loans'][$loan->id] = $loan;
    }
    elseif ($loan->expiry == $today) {
      // Loans that should be handed in today.
      if (!isset($groups['due'])) {
        $groups['due'] = array(
          'title' => t('Loans due'),
          'loans' => array(),
        );
      }
      $groups['due']['loans'][$loan->id] = $loan;
    }
    else {
      // Loans that are to be handed in in x days.
      if (!isset($groups[$loan->expiry])) {
        $time = strtotime($loan->expiry);
        $due_in = t('Due in @count, @date', array(
          '@count' => format_interval($time - time(), 1),
          '@date' => date('d/m/y', $time),
        ));
        $groups[$loan->expiry] = array(
          'title' => $due_in,
          'loans' => array(),
        );
      }
      $groups[$loan->expiry]['loans'][$loan->id] = $loan;
    }
  }

  return $groups;
}

function ding_loan_handle_renew_loans($account, $renew, $not_renewed = array()) {
  $clear_cache = FALSE;
  $items = ding_provider_invoke_page('loan', 'list', $account);
  $overdue = ding_provider_invoke_page('loan', 'overdue', $account);
  if(count($not_renewed)) {
    foreach($not_renewed as $key => $lid) {
      $item = $items[$lid];
      if ($object = $item->entity) {
        $title = $object->getTitle();
        $type = $object->getType();
        ding_loan_adjust_title($title, $type, $item);
        if($item->message != DingEntityBase::NULL) {
          $message = t($item->message);
          $title = ding_loan_set_message($title, $message);
        } else {
          $message = t('It was not possible to renew');
          $title = ding_loan_set_message($title, $message);
        }
      }
      else {
        $title = ding_loan_get_remote_title($account, $item->ding_entity_id);
        $message = t('It was not possible to renew');
        $title = ding_loan_set_message($title, $message);
      }
      $not_renewed[$key] = $title;
    }
  }
  
  $result = ding_provider_invoke('loan', 'renew', $account, $renew);
  $debts = ding_provider_invoke('debt', 'list', $account);
  $renewed = array();
  $fined = array();
  $today = date('Y-m-d');
  foreach ($result as $id => $state) {
    $item = $items[$id];
    $object = null;
    if ($object = $item->entity) {
      $title = $object->getTitle();
      $type = $object->getType();
      ding_loan_adjust_title($title, $type, $item);
    }
    else {
      $title = ding_loan_get_remote_title($account, $item->ding_entity_id);
    }
    
    // @todo Better feedback.
    switch ($state['status']) {
      case DingProviderLoan::STATUS_RENEWED:
        $clear_cache = TRUE;
        if(!$object) {
          $title .= ' - ' . t('Fornyet med forbehold', array(), array('langcode' => 'da'));
        }
        $overdue_feed_today = false;
        if(isset($overdue[$id])) {
          foreach($debts as $did => $debt) {
            list($alma_id, $debt_title) = explode('  ', $debt->note);
            if($alma_id == $id && $debt->date == $today) {
              $message = t('Renewed to late, fine @amount kr', array('@amount' => $debt->amount));
              $title = ding_loan_set_message($title, $message);
              $fined[$id] = $title;
              $overdue_feed_today = true;
            }
          }
        }
        if(!$overdue_feed_today) {
          $renewed[] = $title;
        }
        break;
      case DingProviderLoan::STATUS_NOT_RENEWED:
        $message = '';
        if ($state['loan']->message == 'maxNofRenewals') {
          $message = t('Maximum period reached');
        } elseif ($state['loan']->message == 'copyIsReserved') {
          $message = t('Reserved by another patron');
        } else {
          $message = t('It was not possible to renew');
        }
        $not_renewed[] = ding_loan_set_message($title, $message);
        break;
      default:
        watchdog('ding_loan', 'Unknown renewal status code @code.', array('@code' => $state['loan']['message']), WATCHDOG_ERROR);
    }
  }
  if(count($renewed)) {
    $renewed_title = t('The following was renewed:', array(), array('langcode' => 'da'));
    $renewed_list = theme('item_list', array('items' => $renewed, 'title' => $renewed_title));
    drupal_set_message($renewed_list);
  }
  if(count($not_renewed)) {
    $not_renewed_titel = t('The following could not be renewed:', array(), array('langcode' => 'da'));
    $not_renewed_list = theme('item_list', array('items' => $not_renewed, 'title' => $not_renewed_titel));
    drupal_set_message($not_renewed_list, 'warning');
  }
  
  if(count($fined)) {
    $fined_titel = t('The following materials had passed their return date') . ':';
    $fined_list = theme('item_list', array('items' => array_values($fined), 'title' => $fined_titel));
    drupal_set_message($fined_list, 'error');
  }
  // Clear session cache.
  if ($clear_cache && module_exists('ding_session_cache')) {
    ding_session_cache_clear('ding_loan', 'list');
  }
}

function ding_loan_set_message($title, $message) {
  if($message != '') {
    $title .= ' - <strong>' . $message . '</strong>';
  }
  return $title;
}

function ding_loan_adjust_title(&$title, $type, $item) {
  $object = $item->entity;
  switch($type) {
    case 'Billedbog':
    case 'Bog':
    case 'Bog stor skrift':
    case 'Lydbog (cd-mp3)':
    case 'Lydbog (cd)':
    case 'Tegneserie':
      $creators = implode(', ', $object->getCreators());
      if($creators) {
        $title .= ' : ' . $creators;
      }
      break;
    case 'Blue-ray':
    case 'Dvd':
    case 'Video':
      $publisher = $object->getPublisher();
      if($publisher) {
        $title .= ' : ' . $publisher;
      }
      break;
    case 'Tidsskrift':
    case 'Tidsskriftsartikel':
      $notes = $item->getNotes();
      if($notes) {
        $title .= ' : ' . $notes;
      }
      break;
    case 'Cd (musik)':
    case 'Musik (net)':
      $creators = implode(', ', $object->getCreators());
      $creators = strlen($creators) > 30 ? substr($creators, 0, 30) . '...' : $creators;
      if($creators) {
        $title .= ' : ' . $creators;
      }
      break;
  }
}

function ding_loan_get_remote_title($account, $ding_id) {
  $split_id = explode(':', $ding_id);
  $record_id = array_pop($split_id);
  $data = alma_get_remote_data($account, $record_id);
  if(isset($data['records'][$record_id])) {
    $record = $data['records'][$record_id];
    $title = $record['titles'][0];
  } else {
    $title = t('Unknown title');
  }
  return $title;
}
